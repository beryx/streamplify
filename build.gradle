import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.ethankhall.semantic-versioning' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'org.asciidoctor.convert' version '1.5.8.1'
    id 'org.ajoberstar.github-pages' version '1.7.2'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'net.saliman.properties' version '1.4.6'
    id 'com.github.jk1.dependency-license-report' version '1.1'
}

project.version.with {
    major = streamplifyVersionMajor as int
    minor= streamplifyVersionMinor as int
    patch = streamplifyVersionPatch as int
    if (project.hasProperty('streamplifyVersionLabel')) {
        preRelease = streamplifyVersionLabel
    }
    releaseBuild = Boolean.valueOf(streamplifyReleaseBuild)
}
ext.streamplifyVersion = project.version as String
ext.streamplifyTag = Boolean.valueOf(streamplifyReleaseBuild) ? "v$ext.streamplifyVersion" : 'master'

repositories {
  jcenter()
  mavenCentral()
}

group = 'org.beryx'

def pomConfig = {
    url "https://github.com/beryx/streamplify"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/beryx/streamplify.git"
        developerConnection "https://github.com/beryx/streamplify.git"
        url "https://github.com/beryx/streamplify"
    }
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
    }
}

def defaultEncoding = 'UTF-8'

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'signing'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.github.jk1.dependency-license-report'

    repositories {
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = 1.8
    group = 'org.beryx'
    version = streamplifyVersion

    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding

    configurations {
      provided
      compile {transitive = true}
    }

    license {
        header rootProject.file("license-header.txt")
        skipExistingHeaders true
        ignoreFailures false
    }

    signing {
        sign configurations.archives
    }

    signArchives {
      onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
    }

    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta2'
        provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    }

    sourceSets.main.compileClasspath += configurations.provided

    findbugs {
        effort = "max"
        excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
    }

    jar {
        manifest {
            attributes 'Implementation-Title': "${project.archivesBaseName}",
                    'Implementation-Version': streamplifyVersion,
                    'Implementation-Vendor-Id': 'beryx.org',
                    'Automatic-Module-Name': 'org.beryx.streamplify'
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    configureJavadoc(javadoc)

    task javadocJar(type: Jar, dependsOn: classes) {
        classifier "javadoc"
        from javadoc
    }

    artifacts {
        (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
    }

    task "create-dirs" {
        doLast {
            sourceSets*.java.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }

    ///////////  ECLIPSE  //////////////////
    eclipse {
        classpath {
            file {
                whenMerged {
                    def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                    jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
                }
            }
            plusConfigurations << configurations.provided
        }
        project {
            file.beforeMerged { project ->
                project.natures.clear()
            }
        }
    }

    /////////////  IDEA  ///////////////////
    idea {
      module {
        scopes.PROVIDED.plus += [configurations.provided]
      }
    }
}


def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }

asciidoctor {
  sourceDir = file("doc")
  sources {include 'index.adoc'}
  logDocuments = true
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             icons: 'font',
             imagesdir: 'img',
             'data-uri': '',
             linkattrs: true,
             linkcss: true,
             'git-tag': streamplifyTag,
             'blob-root': "https://github.com/beryx/streamplify/blob/$streamplifyTag"
}

task deleteGHPagesRepo(type: Delete) {
   delete "${project.buildDir}/ghpages"
}

publishGhPages.dependsOn deleteGHPagesRepo

githubPages {
  repoUri = 'https://github.com/beryx/streamplify.git'

  credentials {
    username = System.getenv('GH_PAGES_ACCESS_TOKEN')
    password = ''
  }

  pages {
    def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
    if(pgType == 'init') {
      from file("ghpages")
    } else {
      from file("${asciidoctor.outputDir.path}/html5")
      from file("build/docs")
    }
    def docDir = Boolean.valueOf(streamplifyReleaseBuild) ? 'releases' : 'snapshots'
    if(pgType == 'init') {
      into "."
    } else if(pgType == 'version') {
      publishGhPages.enabled = (docDir != 'snapshots')
      into "$docDir/$streamplifyVersion"
    } else {
      into "$docDir/latest"
    }
  }

}

project('streamplify') {
    apply plugin: 'groovy'

    [compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
    [compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:2.5.0"
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
        testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
          exclude module: 'groovy-all'
        }
        testCompile 'cglib:cglib-nodep:3.2.7'
        testCompile 'org.objenesis:objenesis:2.6'
        testCompile('com.athaydes:spock-reports:1.6.0') { transitive = false}
    }

    publishing {
        publications {
            "$project.name"(MavenPublication) {
                from components.java
                artifact sourcesJar { classifier "sources" }
                artifact javadocJar { classifier "javadoc" }
                groupId 'org.beryx'
                artifactId project.name
                version streamplifyVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', "Module $project.name")
                    root.appendNode('description', "The $project.name artifact")
                    root.children().last() + pomConfig

                    // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                    def licenseNode = root.appendNode('licenses').appendNode('license')
                    licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                    licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    licenseNode.appendNode('distribution', 'repo')
                }
            }
        }
    }
}

project('streamplify-examples') {
    dependencies {
        compile project(':streamplify')
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
    }
}

configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
      title "Streamplify Documentation ($streamplifyVersion)"
      destinationDir file("build/docs/javadoc")
      source project(':streamplify').javadoc.source
      classpath = files(project(':streamplify').javadoc.classpath)
      if(project.configurations.hasProperty('provided')) {
          classpath += project.configurations.provided
      }
      configure(options) {
          links "http://docs.oracle.com/javase/8/docs/api/"
      }
  }
}

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    readFromConsole(header, prompt, false)
}
def readPasswordFromConsole(prompt) {
    readPasswordFromConsole(prompt, true)
}
def readPasswordFromConsole(header, prompt) {
    readFromConsole(header, prompt, true)
}
def readFromConsole(header, prompt, isPassword) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            def val = console."read${isPassword ? 'Password' : 'Line'}"("> $prompt: ")
            if(val) {
                value = new String(val)
            }
        }
        return value
    } else {
        throw new GradleException("Cannot get console. Try running gradle with the '--no-daemon' option")
    }
}

def isPublishTask(task) {
  task.name.startsWith('publish') && (task.name != 'publishGhPages')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ["streamplify"]
    pkg {
        repo = 'maven'
        name = 'streamplify'
        userOrg = 'beryx'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/beryx/streamplify.git'

        version {
                name = streamplifyVersion
                desc = "Streamplify $streamplifyVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = streamplifyVersion
                gpg {
                    sign = true
                }
        }
    }
}

dependencies {
    compile project(':streamplify')
    compile project(':streamplify-examples')
}
